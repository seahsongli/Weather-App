(()=>{"use strict";var n={772:(n,e,t)=>{t.d(e,{Z:()=>a});var o=t(537),r=t.n(o),i=t(645),A=t.n(i)()(r());A.push([n.id,"body{\n    height:100vh;\n    width:100%;\n    display:flex;\n    align-items: center;\n    justify-content: center;\n    padding:0px;\n    margin:0px;\n    background: rgb(208,17,56);\n    background: linear-gradient(90deg, rgba(208,17,56,1) 0%, rgba(125,5,222,1) 100%);\n}\n\n.background{\n    position:absolute;\n    opacity:60%;\n    width:100%;\n    height:95%;\n    box-sizing:border-box;\n    bottom:5%;\n    right:0.7%;\n   \n}\n\n.container{\n    height:60%;\n    width:70%;\n    background: rgb(54, 69, 79);\n    border-radius: 40px 40px;\n    box-shadow: 5px solid  black;\n    position:relative;\n    justify-content: center;\n    flex-direction: column;\n    opacity:300%;\n    color:white;\n   \n}\n\n/* start of styling for header */\n.header{\n    display:flex;\n    justify-content: space-between;\n    padding:30px;\n    height:70%;\n    font-size:20px;\n    font-weight: bold;\n    animation: fadeIn2 1.0s;\n    transition-timing-function: ease-out;\n}\n\n.title{\n    font-size: 30px;\n}\n\n.header-items{\n    display:flex;\n    flex-direction: column;\n    align-items: flex-end;\n    gap:3px;\n}\n\n#locationLogo{\n    height:85px;\n    width:70px\n}\n\n#form{\n    justify-self: flex-end;\n    align-self: flex-end;\n}\n\n\n/* end of styling for header */\n\n\n/* start of styling for body content */\n.content{\n    height:30%; \n    \n}\n.weather-content{\n    display:flex;\n    background-color: darkslategrey;\n    width:100%;\n    height:100%;\n    font-size: 25px;\n    justify-content: center;\n    align-items: center;\n    border-bottom-left-radius: 40px;\n    border-bottom-right-radius: 40px;\n}\n\n.current{\n    width:35%;\n    display:flex;\n    gap:22px 22px;\n    justify-content: center;\n    align-items: center;\n    animation: fadeIn 1.0s;\n    transition-timing-function: ease-out;\n}\n\n.currentContent{\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    \n}\n\n.currentTemperature{\n    font-size:80px;\n}\n\n#currentWeatherIcon{\n    height:100px;\n    width:55px;\n}\n\n.forecast-content{\n    display:flex;\n    gap:30px 30px;\n    font-size: 25px;\n    justify-content: center;\n    align-items: center;\n}\n\n.forecast{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap:15px 15px;\n    animation: fadeIn 1.0s;\n    transition-timing-function: ease-out;\n}\n\n.error{\n    background-color: red;\n    color: white;\n    font-weight: bold;\n    font-size: 15px;\n}\n\n/* end of styling for body content */\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n    top: 6rem;\n  }\n  100% {\n    opacity: 0.5;\n    top: 4.4rem;\n  }\n}\n\n@keyframes fadeIn2 {\n    0% {\n      opacity: 0.1;\n      transform: scale(0.9, 0.9);\n    }\n    100% {\n      opacity: 1;\n    }\n  }","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,UAAU;IACV,YAAY;IACZ,mBAAmB;IACnB,uBAAuB;IACvB,WAAW;IACX,UAAU;IACV,0BAA0B;IAC1B,gFAAgF;AACpF;;AAEA;IACI,iBAAiB;IACjB,WAAW;IACX,UAAU;IACV,UAAU;IACV,qBAAqB;IACrB,SAAS;IACT,UAAU;;AAEd;;AAEA;IACI,UAAU;IACV,SAAS;IACT,2BAA2B;IAC3B,wBAAwB;IACxB,4BAA4B;IAC5B,iBAAiB;IACjB,uBAAuB;IACvB,sBAAsB;IACtB,YAAY;IACZ,WAAW;;AAEf;;AAEA,gCAAgC;AAChC;IACI,YAAY;IACZ,8BAA8B;IAC9B,YAAY;IACZ,UAAU;IACV,cAAc;IACd,iBAAiB;IACjB,uBAAuB;IACvB,oCAAoC;AACxC;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,YAAY;IACZ,sBAAsB;IACtB,qBAAqB;IACrB,OAAO;AACX;;AAEA;IACI,WAAW;IACX;AACJ;;AAEA;IACI,sBAAsB;IACtB,oBAAoB;AACxB;;;AAGA,8BAA8B;;;AAG9B,sCAAsC;AACtC;IACI,UAAU;;AAEd;AACA;IACI,YAAY;IACZ,+BAA+B;IAC/B,UAAU;IACV,WAAW;IACX,eAAe;IACf,uBAAuB;IACvB,mBAAmB;IACnB,+BAA+B;IAC/B,gCAAgC;AACpC;;AAEA;IACI,SAAS;IACT,YAAY;IACZ,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,sBAAsB;IACtB,oCAAoC;AACxC;;AAEA;IACI,YAAY;IACZ,sBAAsB;IACtB,mBAAmB;;AAEvB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,eAAe;IACf,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,oCAAoC;AACxC;;AAEA;IACI,qBAAqB;IACrB,YAAY;IACZ,iBAAiB;IACjB,eAAe;AACnB;;AAEA,oCAAoC;;AAEpC;EACE;IACE,UAAU;IACV,SAAS;EACX;EACA;IACE,YAAY;IACZ,WAAW;EACb;AACF;;AAEA;IACI;MACE,YAAY;MACZ,0BAA0B;IAC5B;IACA;MACE,UAAU;IACZ;EACF",sourcesContent:["body{\n    height:100vh;\n    width:100%;\n    display:flex;\n    align-items: center;\n    justify-content: center;\n    padding:0px;\n    margin:0px;\n    background: rgb(208,17,56);\n    background: linear-gradient(90deg, rgba(208,17,56,1) 0%, rgba(125,5,222,1) 100%);\n}\n\n.background{\n    position:absolute;\n    opacity:60%;\n    width:100%;\n    height:95%;\n    box-sizing:border-box;\n    bottom:5%;\n    right:0.7%;\n   \n}\n\n.container{\n    height:60%;\n    width:70%;\n    background: rgb(54, 69, 79);\n    border-radius: 40px 40px;\n    box-shadow: 5px solid  black;\n    position:relative;\n    justify-content: center;\n    flex-direction: column;\n    opacity:300%;\n    color:white;\n   \n}\n\n/* start of styling for header */\n.header{\n    display:flex;\n    justify-content: space-between;\n    padding:30px;\n    height:70%;\n    font-size:20px;\n    font-weight: bold;\n    animation: fadeIn2 1.0s;\n    transition-timing-function: ease-out;\n}\n\n.title{\n    font-size: 30px;\n}\n\n.header-items{\n    display:flex;\n    flex-direction: column;\n    align-items: flex-end;\n    gap:3px;\n}\n\n#locationLogo{\n    height:85px;\n    width:70px\n}\n\n#form{\n    justify-self: flex-end;\n    align-self: flex-end;\n}\n\n\n/* end of styling for header */\n\n\n/* start of styling for body content */\n.content{\n    height:30%; \n    \n}\n.weather-content{\n    display:flex;\n    background-color: darkslategrey;\n    width:100%;\n    height:100%;\n    font-size: 25px;\n    justify-content: center;\n    align-items: center;\n    border-bottom-left-radius: 40px;\n    border-bottom-right-radius: 40px;\n}\n\n.current{\n    width:35%;\n    display:flex;\n    gap:22px 22px;\n    justify-content: center;\n    align-items: center;\n    animation: fadeIn 1.0s;\n    transition-timing-function: ease-out;\n}\n\n.currentContent{\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n    \n}\n\n.currentTemperature{\n    font-size:80px;\n}\n\n#currentWeatherIcon{\n    height:100px;\n    width:55px;\n}\n\n.forecast-content{\n    display:flex;\n    gap:30px 30px;\n    font-size: 25px;\n    justify-content: center;\n    align-items: center;\n}\n\n.forecast{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    gap:15px 15px;\n    animation: fadeIn 1.0s;\n    transition-timing-function: ease-out;\n}\n\n.error{\n    background-color: red;\n    color: white;\n    font-weight: bold;\n    font-size: 15px;\n}\n\n/* end of styling for body content */\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n    top: 6rem;\n  }\n  100% {\n    opacity: 0.5;\n    top: 4.4rem;\n  }\n}\n\n@keyframes fadeIn2 {\n    0% {\n      opacity: 0.1;\n      transform: scale(0.9, 0.9);\n    }\n    100% {\n      opacity: 1;\n    }\n  }"],sourceRoot:""}]);const a=A},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var A={};if(o)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(A[c]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);o&&A[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),A=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(A).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},A=[],a=0;a<n.length;a++){var c=n[a],s=o.base?c[0]+o.base:c[0],l=i[s]||0,u="".concat(s," ").concat(l);i[s]=l+1;var d=t(u),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)e[d].references++,e[d].updater(f);else{var p=r(f,o);o.byIndex=a,e.splice(a,0,{identifier:u,updater:p,references:1})}A.push(u)}return A}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var A=0;A<i.length;A++){var a=t(i[A]);e[a].references--}for(var c=o(n,r),s=0;s<i.length;s++){var l=t(i[s]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=c}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),o=t(795),r=t.n(o),i=t(569),A=t.n(i),a=t(565),c=t.n(a),s=t(216),l=t.n(s),u=t(589),d=t.n(u),f=t(772),p={};async function C(n="Singapore"){try{let e=[],t=await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${n}&appid=0e5e41d3a0b1d9cfee583d3275dd1049&units=metric`);console.log(t);let o=await t.json();return e.push(o.list[0],o.list[7],o.list[15],o.list[23],o.list[31],o.list[39]),e}catch(n){console.log(n)}}function g(n="singapore"){!function(){let n=Array.from(document.querySelectorAll("#day"));for(let r=0;r<n.length;r++){var e=new Date,t=r,o=e.setDate(e.getDate()+t);console.log(o),n[r].textContent=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][new Date(o).getDay()]}}(),async function(n){let e=await async function(n){const e=await C(n);console.log(e);let t=[];for(let n in e)t.push(e[n].weather[0].main);return t}(n);console.log(e);let t=Array.from(document.querySelectorAll(".weatherIcon"));for(let n=0;n<t.length;n++)"Rain"==e[n]?t[n].src="../src/icons/cloud-lightning.svg":"Clouds"==e[n]?t[n].src="../src/icons/cloud.svg":"Sun"==e[n]&&(t[n].src="../src/icons/sun.svg")}(n),async function(n){let e=await async function(n){const e=await C(n);let t=[];console.log(e);for(let n in e)t.push(e[n].main.temp);return t}(n);console.log(e);let t=Array.from(document.querySelectorAll("#temp"));for(let n=0;n<t.length;n++)t[n].textContent=Math.round(10*e[n])/10+"°"}(n)}p.styleTagTransform=d(),p.setAttributes=c(),p.insert=A().bind(null,"head"),p.domAPI=r(),p.insertStyleElement=l(),e()(f.Z,p),f.Z&&f.Z.locals&&f.Z.locals,C(),setInterval((function(n="Singapore"){const e=new Date;document.querySelector("#currentTime").innerHTML=e.toLocaleString("en-US",{timeZone:n})}),1e3),document.querySelector("form").addEventListener("submit",(async n=>{n.preventDefault();let e=document.querySelector("#currentLocation"),t=document.querySelector(".searchLocation"),o=document.querySelector(".error");if(void 0===await C(t.value))throw o.style.display="flex",new Error("Unable to fetch content");o.style.display="none",g(t.value),e.textContent=t.value})),g()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,